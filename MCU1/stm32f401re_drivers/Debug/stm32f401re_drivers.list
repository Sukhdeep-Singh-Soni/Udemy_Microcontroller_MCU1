
stm32f401re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004c8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800065c  08000664  00001664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800065c  0800065c  00001664  2**0
                  CONTENTS
  4 .ARM          00000000  0800065c  0800065c  00001664  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800065c  08000664  00001664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800065c  0800065c  0000165c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000660  08000660  00001660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000664  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000664  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000085f  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000261  00000000  00000000  00001ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00002158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007e  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000135e  00000000  00000000  0000228e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b7d  00000000  00000000  000035ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004f83  00000000  00000000  00004169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000090ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  00009130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00009354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000644 	.word	0x08000644

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000644 	.word	0x08000644

080001d4 <delay>:
#include "stm32f401re_gpio_driver.h"

#define LOW				0
#define BUTTON_PRESSED	LOW

void delay(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i <= 500000/2; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	0003d090 	.word	0x0003d090

08000200 <main>:

int main(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0

	GPIO_Handle_t hgpio; //for led
	GPIO_Handle_t hgpio1; //for button

	/*led config*/
	hgpio.pGPIOx = GPIOA;
 8000206:	4b19      	ldr	r3, [pc, #100]	@ (800026c <main+0x6c>)
 8000208:	60fb      	str	r3, [r7, #12]
	hgpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 800020a:	2305      	movs	r3, #5
 800020c:	743b      	strb	r3, [r7, #16]
	hgpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800020e:	2301      	movs	r3, #1
 8000210:	747b      	strb	r3, [r7, #17]
	hgpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000212:	2301      	movs	r3, #1
 8000214:	74bb      	strb	r3, [r7, #18]
	hgpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_PP;
 8000216:	2300      	movs	r3, #0
 8000218:	753b      	strb	r3, [r7, #20]
	hgpio.GPIO_PinConfig.GPIO_PinPuPd = GPIO_NO_PUPD;
 800021a:	2300      	movs	r3, #0
 800021c:	74fb      	strb	r3, [r7, #19]

	GPIO_PCLKCtrl(GPIOA, ENABLE);
 800021e:	2101      	movs	r1, #1
 8000220:	4812      	ldr	r0, [pc, #72]	@ (800026c <main+0x6c>)
 8000222:	f000 f851 	bl	80002c8 <GPIO_PCLKCtrl>

	GPIO_Init(&hgpio);
 8000226:	f107 030c 	add.w	r3, r7, #12
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f8ec 	bl	8000408 <GPIO_Init>

	/*button config*/
	hgpio1.pGPIOx = GPIOC;
 8000230:	4b0f      	ldr	r3, [pc, #60]	@ (8000270 <main+0x70>)
 8000232:	603b      	str	r3, [r7, #0]
	hgpio1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000234:	230d      	movs	r3, #13
 8000236:	713b      	strb	r3, [r7, #4]
	hgpio1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000238:	2300      	movs	r3, #0
 800023a:	717b      	strb	r3, [r7, #5]
	hgpio1.GPIO_PinConfig.GPIO_PinPuPd = GPIO_NO_PUPD;
 800023c:	2300      	movs	r3, #0
 800023e:	71fb      	strb	r3, [r7, #7]

	GPIO_PCLKCtrl(GPIOC, ENABLE);
 8000240:	2101      	movs	r1, #1
 8000242:	480b      	ldr	r0, [pc, #44]	@ (8000270 <main+0x70>)
 8000244:	f000 f840 	bl	80002c8 <GPIO_PCLKCtrl>

	GPIO_Init(&hgpio1);
 8000248:	463b      	mov	r3, r7
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f8dc 	bl	8000408 <GPIO_Init>

	while(1) {

		if(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13) == BUTTON_PRESSED) {
 8000250:	210d      	movs	r1, #13
 8000252:	4807      	ldr	r0, [pc, #28]	@ (8000270 <main+0x70>)
 8000254:	f000 f9a6 	bl	80005a4 <GPIO_ReadFromInputPin>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d1f8      	bne.n	8000250 <main+0x50>
			delay(); /*for button debouncing*/
 800025e:	f7ff ffb9 	bl	80001d4 <delay>
			GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000262:	2105      	movs	r1, #5
 8000264:	4801      	ldr	r0, [pc, #4]	@ (800026c <main+0x6c>)
 8000266:	f000 f9b3 	bl	80005d0 <GPIO_TogglePin>
		if(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13) == BUTTON_PRESSED) {
 800026a:	e7f1      	b.n	8000250 <main+0x50>
 800026c:	40020000 	.word	0x40020000
 8000270:	40020800 	.word	0x40020800

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	@ (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000278:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480c      	ldr	r0, [pc, #48]	@ (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027e:	490d      	ldr	r1, [pc, #52]	@ (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000280:	4a0d      	ldr	r2, [pc, #52]	@ (80002b8 <LoopForever+0xe>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	@ (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000294:	4c0a      	ldr	r4, [pc, #40]	@ (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 f9ab 	bl	80005fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ffab 	bl	8000200 <main>

080002aa <LoopForever>:

LoopForever:
  b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000664 	.word	0x08000664
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	2000001c 	.word	0x2000001c

080002c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC_IRQHandler>
	...

080002c8 <GPIO_PCLKCtrl>:
 * @param	-	base address of gpiox peripheral
 * @param	-	ENABLE or DISABLE macros
 * @ret		-	none
 * @note	-	none
 * */
void GPIO_PCLKCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	460b      	mov	r3, r1
 80002d2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE) {
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d141      	bne.n	800035e <GPIO_PCLKCtrl+0x96>
		if(pGPIOx == GPIOA) {
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a43      	ldr	r2, [pc, #268]	@ (80003ec <GPIO_PCLKCtrl+0x124>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d106      	bne.n	80002f0 <GPIO_PCLKCtrl+0x28>
			GPIOA_CLK_EN();
 80002e2:	4b43      	ldr	r3, [pc, #268]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e6:	4a42      	ldr	r2, [pc, #264]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOE_CLK_DI();
		} else if(pGPIOx == GPIOH) {
			GPIOH_CLK_DI();
		}
	}
}
 80002ee:	e077      	b.n	80003e0 <GPIO_PCLKCtrl+0x118>
		} else if(pGPIOx == GPIOB) {
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a40      	ldr	r2, [pc, #256]	@ (80003f4 <GPIO_PCLKCtrl+0x12c>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d106      	bne.n	8000306 <GPIO_PCLKCtrl+0x3e>
			GPIOB_CLK_EN();
 80002f8:	4b3d      	ldr	r3, [pc, #244]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fc:	4a3c      	ldr	r2, [pc, #240]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000304:	e06c      	b.n	80003e0 <GPIO_PCLKCtrl+0x118>
		} else if(pGPIOx == GPIOC) {
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a3b      	ldr	r2, [pc, #236]	@ (80003f8 <GPIO_PCLKCtrl+0x130>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d106      	bne.n	800031c <GPIO_PCLKCtrl+0x54>
			GPIOC_CLK_EN();
 800030e:	4b38      	ldr	r3, [pc, #224]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000312:	4a37      	ldr	r2, [pc, #220]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800031a:	e061      	b.n	80003e0 <GPIO_PCLKCtrl+0x118>
		} else if(pGPIOx == GPIOD) {
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a37      	ldr	r2, [pc, #220]	@ (80003fc <GPIO_PCLKCtrl+0x134>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_PCLKCtrl+0x6a>
			GPIOD_CLK_EN();
 8000324:	4b32      	ldr	r3, [pc, #200]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000328:	4a31      	ldr	r2, [pc, #196]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000330:	e056      	b.n	80003e0 <GPIO_PCLKCtrl+0x118>
		} else if(pGPIOx == GPIOE) {
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a32      	ldr	r2, [pc, #200]	@ (8000400 <GPIO_PCLKCtrl+0x138>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIO_PCLKCtrl+0x80>
			GPIOE_CLK_EN();
 800033a:	4b2d      	ldr	r3, [pc, #180]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033e:	4a2c      	ldr	r2, [pc, #176]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 8000340:	f043 0310 	orr.w	r3, r3, #16
 8000344:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000346:	e04b      	b.n	80003e0 <GPIO_PCLKCtrl+0x118>
		} else if(pGPIOx == GPIOH) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a2e      	ldr	r2, [pc, #184]	@ (8000404 <GPIO_PCLKCtrl+0x13c>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d147      	bne.n	80003e0 <GPIO_PCLKCtrl+0x118>
			GPIOH_CLK_EN();
 8000350:	4b27      	ldr	r3, [pc, #156]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000354:	4a26      	ldr	r2, [pc, #152]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 8000356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800035a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035c:	e040      	b.n	80003e0 <GPIO_PCLKCtrl+0x118>
		if(pGPIOx == GPIOA) {
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a22      	ldr	r2, [pc, #136]	@ (80003ec <GPIO_PCLKCtrl+0x124>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_PCLKCtrl+0xac>
			GPIOA_CLK_DI();
 8000366:	4b22      	ldr	r3, [pc, #136]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036a:	4a21      	ldr	r2, [pc, #132]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 800036c:	f023 0301 	bic.w	r3, r3, #1
 8000370:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000372:	e035      	b.n	80003e0 <GPIO_PCLKCtrl+0x118>
		} else if(pGPIOx == GPIOB) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a1f      	ldr	r2, [pc, #124]	@ (80003f4 <GPIO_PCLKCtrl+0x12c>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d106      	bne.n	800038a <GPIO_PCLKCtrl+0xc2>
			GPIOB_CLK_DI();
 800037c:	4b1c      	ldr	r3, [pc, #112]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000380:	4a1b      	ldr	r2, [pc, #108]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 8000382:	f023 0302 	bic.w	r3, r3, #2
 8000386:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000388:	e02a      	b.n	80003e0 <GPIO_PCLKCtrl+0x118>
		} else if(pGPIOx == GPIOC) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a1a      	ldr	r2, [pc, #104]	@ (80003f8 <GPIO_PCLKCtrl+0x130>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d106      	bne.n	80003a0 <GPIO_PCLKCtrl+0xd8>
			GPIOC_CLK_DI();
 8000392:	4b17      	ldr	r3, [pc, #92]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000396:	4a16      	ldr	r2, [pc, #88]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 8000398:	f023 0304 	bic.w	r3, r3, #4
 800039c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800039e:	e01f      	b.n	80003e0 <GPIO_PCLKCtrl+0x118>
		} else if(pGPIOx == GPIOD) {
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a16      	ldr	r2, [pc, #88]	@ (80003fc <GPIO_PCLKCtrl+0x134>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d106      	bne.n	80003b6 <GPIO_PCLKCtrl+0xee>
			GPIOD_CLK_DI();
 80003a8:	4b11      	ldr	r3, [pc, #68]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ac:	4a10      	ldr	r2, [pc, #64]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 80003ae:	f023 0308 	bic.w	r3, r3, #8
 80003b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b4:	e014      	b.n	80003e0 <GPIO_PCLKCtrl+0x118>
		} else if(pGPIOx == GPIOE) {
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a11      	ldr	r2, [pc, #68]	@ (8000400 <GPIO_PCLKCtrl+0x138>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_PCLKCtrl+0x104>
			GPIOE_CLK_DI();
 80003be:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c2:	4a0b      	ldr	r2, [pc, #44]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 80003c4:	f023 0310 	bic.w	r3, r3, #16
 80003c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ca:	e009      	b.n	80003e0 <GPIO_PCLKCtrl+0x118>
		} else if(pGPIOx == GPIOH) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000404 <GPIO_PCLKCtrl+0x13c>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d105      	bne.n	80003e0 <GPIO_PCLKCtrl+0x118>
			GPIOH_CLK_DI();
 80003d4:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d8:	4a05      	ldr	r2, [pc, #20]	@ (80003f0 <GPIO_PCLKCtrl+0x128>)
 80003da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	40020000 	.word	0x40020000
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40020400 	.word	0x40020400
 80003f8:	40020800 	.word	0x40020800
 80003fc:	40020c00 	.word	0x40020c00
 8000400:	40021000 	.word	0x40021000
 8000404:	40021c00 	.word	0x40021c00

08000408 <GPIO_Init>:
 * 				in pGPIOHandle(user need to initialize this handle)
 * @param	-	pointer to GPIO_Handle_t structure(contains GPIO pin configuration)
 * @ret		-	none
 * @note	-	none
 * */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000408:	b480      	push	{r7}
 800040a:	b087      	sub	sp, #28
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
	/*1. configure the gpio mode*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	795b      	ldrb	r3, [r3, #5]
 8000418:	2b03      	cmp	r3, #3
 800041a:	d821      	bhi.n	8000460 <GPIO_Init+0x58>
		//non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	795b      	ldrb	r3, [r3, #5]
 8000420:	461a      	mov	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	791b      	ldrb	r3, [r3, #4]
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	fa02 f303 	lsl.w	r3, r2, r3
 800042c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	791b      	ldrb	r3, [r3, #4]
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	2103      	movs	r1, #3
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	43db      	mvns	r3, r3
 8000442:	4619      	mov	r1, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	400a      	ands	r2, r1
 800044a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //set
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	6819      	ldr	r1, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	697a      	ldr	r2, [r7, #20]
 8000458:	430a      	orrs	r2, r1
 800045a:	601a      	str	r2, [r3, #0]
		temp = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]
	} else {
		//interrupt mode
	}
	/*2. configure the output speed*/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	799b      	ldrb	r3, [r3, #6]
 8000464:	461a      	mov	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	fa02 f303 	lsl.w	r3, r2, r3
 8000470:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	2103      	movs	r1, #3
 8000480:	fa01 f303 	lsl.w	r3, r1, r3
 8000484:	43db      	mvns	r3, r3
 8000486:	4619      	mov	r1, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	400a      	ands	r2, r1
 800048e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	6899      	ldr	r1, [r3, #8]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	697a      	ldr	r2, [r7, #20]
 800049c:	430a      	orrs	r2, r1
 800049e:	609a      	str	r2, [r3, #8]
	temp = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
	/*3. configure pullup/pulldown*/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPd << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	79db      	ldrb	r3, [r3, #7]
 80004a8:	461a      	mov	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	791b      	ldrb	r3, [r3, #4]
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	68da      	ldr	r2, [r3, #12]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	2103      	movs	r1, #3
 80004c4:	fa01 f303 	lsl.w	r3, r1, r3
 80004c8:	43db      	mvns	r3, r3
 80004ca:	4619      	mov	r1, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	400a      	ands	r2, r1
 80004d2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	68d9      	ldr	r1, [r3, #12]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	697a      	ldr	r2, [r7, #20]
 80004e0:	430a      	orrs	r2, r1
 80004e2:	60da      	str	r2, [r3, #12]
	temp = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
	/*4. configure GPIO output type*/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	7a1b      	ldrb	r3, [r3, #8]
 80004ec:	461a      	mov	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	791b      	ldrb	r3, [r3, #4]
 80004f2:	fa02 f303 	lsl.w	r3, r2, r3
 80004f6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	685a      	ldr	r2, [r3, #4]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	4619      	mov	r1, r3
 8000504:	2301      	movs	r3, #1
 8000506:	408b      	lsls	r3, r1
 8000508:	43db      	mvns	r3, r3
 800050a:	4619      	mov	r1, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	400a      	ands	r2, r1
 8000512:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	6859      	ldr	r1, [r3, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	697a      	ldr	r2, [r7, #20]
 8000520:	430a      	orrs	r2, r1
 8000522:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
	/*5. configure GPIO alternate functionality*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	795b      	ldrb	r3, [r3, #5]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d133      	bne.n	8000598 <GPIO_Init+0x190>
		uint32_t temp1, temp2;
		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 8; /*index to goto*/
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	791b      	ldrb	r3, [r3, #4]
 8000534:	08db      	lsrs	r3, r3, #3
 8000536:	b2db      	uxtb	r3, r3
 8000538:	613b      	str	r3, [r7, #16]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 8; /*position to shift to*/
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	f003 0307 	and.w	r3, r3, #7
 8000542:	60fb      	str	r3, [r7, #12]
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunc << (4 * temp2));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	7a5b      	ldrb	r3, [r3, #9]
 8000548:	461a      	mov	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xf << (4 * temp2)); //clear first
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	3208      	adds	r2, #8
 800055c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	210f      	movs	r1, #15
 8000566:	fa01 f303 	lsl.w	r3, r1, r3
 800056a:	43db      	mvns	r3, r3
 800056c:	4619      	mov	r1, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4011      	ands	r1, r2
 8000574:	693a      	ldr	r2, [r7, #16]
 8000576:	3208      	adds	r2, #8
 8000578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp; //set alternate functionality
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	3208      	adds	r2, #8
 8000584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	4311      	orrs	r1, r2
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	3208      	adds	r2, #8
 8000594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000598:	bf00      	nop
 800059a:	371c      	adds	r7, #28
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <GPIO_ReadFromInputPin>:
 * @param	-	base address of gpiox peripheral
 * @param	-	pin number to read status from
 * @ret		-	0 or 1
 * @note	-	none
 * */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t)(((pGPIOx->IDR) >> PinNumber) & 0x00000001U);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	691a      	ldr	r2, [r3, #16]
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	fa22 f303 	lsr.w	r3, r2, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	73fb      	strb	r3, [r7, #15]

	return value;
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <GPIO_TogglePin>:
 * @param	-	base address of gpiox peripheral
 * @param	-	pin numebr to toggle
 * @ret		-	none
 * @note	-	none
 * */
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	78fa      	ldrb	r2, [r7, #3]
 80005e2:	2101      	movs	r1, #1
 80005e4:	fa01 f202 	lsl.w	r2, r1, r2
 80005e8:	405a      	eors	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	615a      	str	r2, [r3, #20]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <__libc_init_array>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000634 <__libc_init_array+0x38>)
 8000600:	4c0d      	ldr	r4, [pc, #52]	@ (8000638 <__libc_init_array+0x3c>)
 8000602:	1b64      	subs	r4, r4, r5
 8000604:	10a4      	asrs	r4, r4, #2
 8000606:	2600      	movs	r6, #0
 8000608:	42a6      	cmp	r6, r4
 800060a:	d109      	bne.n	8000620 <__libc_init_array+0x24>
 800060c:	4d0b      	ldr	r5, [pc, #44]	@ (800063c <__libc_init_array+0x40>)
 800060e:	4c0c      	ldr	r4, [pc, #48]	@ (8000640 <__libc_init_array+0x44>)
 8000610:	f000 f818 	bl	8000644 <_init>
 8000614:	1b64      	subs	r4, r4, r5
 8000616:	10a4      	asrs	r4, r4, #2
 8000618:	2600      	movs	r6, #0
 800061a:	42a6      	cmp	r6, r4
 800061c:	d105      	bne.n	800062a <__libc_init_array+0x2e>
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f855 3b04 	ldr.w	r3, [r5], #4
 8000624:	4798      	blx	r3
 8000626:	3601      	adds	r6, #1
 8000628:	e7ee      	b.n	8000608 <__libc_init_array+0xc>
 800062a:	f855 3b04 	ldr.w	r3, [r5], #4
 800062e:	4798      	blx	r3
 8000630:	3601      	adds	r6, #1
 8000632:	e7f2      	b.n	800061a <__libc_init_array+0x1e>
 8000634:	0800065c 	.word	0x0800065c
 8000638:	0800065c 	.word	0x0800065c
 800063c:	0800065c 	.word	0x0800065c
 8000640:	08000660 	.word	0x08000660

08000644 <_init>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	bf00      	nop
 8000648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064a:	bc08      	pop	{r3}
 800064c:	469e      	mov	lr, r3
 800064e:	4770      	bx	lr

08000650 <_fini>:
 8000650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000652:	bf00      	nop
 8000654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000656:	bc08      	pop	{r3}
 8000658:	469e      	mov	lr, r3
 800065a:	4770      	bx	lr
